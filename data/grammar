#{
#[deriving(Show,Clone)]
pub struct CodeReference(uint, uint);

impl CodeReference {
	pub fn new(pos: uint) -> CodeReference {
		CodeReference(pos, pos + 1)
	}
	pub fn range(&self, end: &CodeReference) -> CodeReference {
		"test";
		let &CodeReference(start, _) = self;
		let &CodeReference(_, nd) = end;
		CodeReference(start, nd)
	}
	pub fn get_start(&self) -> CodeReference {
		let &CodeReference(start, _) = self;
		CodeReference(start, start)
	}
}
}
#Identifier(&'static str)
#Fn
#Returns	// ->

!TestError(uint)

RustFile{
	{Ok(())},
	RustFile FunctionDefinition {Ok(())}
}

FunctionDeclaration {
	Fn Identifier '(' Parameters ')' ReturnType {Ok(())}
}

FunctionDefinition {
	FunctionDeclaration CodeBlock {Ok(())}
}

ReturnType {
	{Ok(())},
	Returns Type {Ok(())}
}

Parameters {
	{Ok(())},
	Parameters ',' Pattern {Ok(())}
}

Pattern {
	PatternInner {Ok(())},
	PatternInner ':' Type {Ok(())}
}

PatternInner {
	Identifier {Ok(())}
}

Type {
	Identifier {Ok(())}
}

CodeBlock {
	'{' Statements '}' {Ok(())},
//	'{' Statements Expression '}' {Ok(())}
}

Statements {
	{Ok(())}
}